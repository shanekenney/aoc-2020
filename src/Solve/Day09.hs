module Solve.Day09 where

import Data.List
import Data.Maybe
import Prelude hiding (seq)

input :: String
input = "30\n16\n33\n40\n41\n25\n2\n29\n37\n4\n11\n1\n42\n10\n21\n13\n48\n28\n19\n5\n46\n49\n24\n8\n34\n3\n6\n30\n7\n22\n9\n12\n14\n15\n16\n27\n4\n11\n60\n10\n17\n56\n13\n18\n19\n20\n21\n23\n29\n24\n25\n39\n47\n71\n34\n22\n26\n28\n30\n14\n15\n27\n31\n32\n35\n38\n37\n48\n33\n36\n40\n64\n41\n66\n49\n42\n58\n45\n83\n29\n75\n60\n44\n51\n53\n46\n68\n69\n70\n62\n113\n65\n71\n76\n95\n73\n74\n78\n139\n86\n106\n80\n82\n89\n119\n112\n90\n133\n159\n99\n127\n140\n147\n169\n135\n136\n212\n144\n149\n160\n208\n188\n222\n162\n166\n170\n179\n181\n292\n189\n268\n358\n226\n393\n243\n284\n271\n337\n302\n332\n280\n304\n293\n309\n322\n328\n336\n341\n349\n345\n415\n471\n370\n711\n432\n469\n762\n497\n514\n523\n608\n573\n582\n584\n589\n597\n602\n615\n658\n650\n669\n677\n719\n863\n954\n1179\n802\n1369\n1890\n1344\n1216\n1239\n1308\n1037\n1181\n1756\n1266\n1569\n1173\n1186\n1604\n1612\n1695\n1319\n1327\n1623\n1396\n1521\n1665\n1839\n2547\n2041\n2210\n2253\n2420\n2835\n2218\n2356\n2364\n2359\n2965\n2868\n2492\n3733\n3537\n2646\n2984\n4765\n2715\n2723\n5343\n2917\n3186\n3918\n3880\n4251\n4405\n4428\n5481\n4720\n7455\n4715\n5591\n4856\n8833\n5138\n5207\n5901\n9128\n7699\n5361\n5909\n5632\n7128\n5640\n11046\n8278\n7066\n8131\n13600\n8966\n9120\n9143\n20012\n14179\n15902\n13681\n9994\n10063\n10345\n26247\n15052\n10993\n11001\n11270\n11272\n11541\n16209\n12706\n13771\n15197\n15344\n26885\n17097\n21604\n21615\n18263\n21333\n20987\n20057\n27091\n20339\n23051\n20408\n21338\n21994\n43982\n22263\n22271\n39591\n25043\n25312\n35401\n44389\n28968\n35605\n32441\n35360\n37154\n56739\n42320\n38320\n40465\n42679\n40396\n43601\n42402\n42671\n41746\n57631\n57484\n60917\n44534\n47314\n78785\n114145\n54280\n69364\n100155\n61409\n80640\n95059\n92991\n75474\n82211\n78716\n80066\n80861\n82142\n82798\n96951\n84148\n84417\n122326\n115197\n91848\n125395\n98814\n101594\n173844\n145557\n115689\n140125\n156335\n142049\n154190\n155540\n214174\n158272\n166946\n158782\n162208\n181612\n198487\n167215\n183231\n238607\n186011\n190662\n214503\n207537\n200408\n302333\n241719\n257738\n346997\n408934\n352957\n356759\n300321\n350177\n313812\n558059\n317054\n320990\n369745\n393548\n348827\n557167\n440969\n619387\n376673\n908236\n514220\n502741\n617375\n499457\n542040\n983009\n604735\n614133\n671167\n649148\n621311\n763293\n630866\n998283\n697663\n638044\n878157\n742375\n940426\n1152264\n1041497\n943710\n1013677\n1148605\n1130323\n1002198\n1044781\n1104192\n1113590\n1146775\n1320315\n1259355\n1633064\n1252177\n1287192\n1268910\n1335707\n1328529\n1380419\n1581754\n1516201\n1620532\n1686085\n2411619\n2057300\n2576774\n1945908\n2015875\n3462109\n2106390\n2158371\n2425200\n2217782\n2372945\n2595062\n2528265\n2511532\n3631993\n2521087\n3486809\n2597439\n2664236\n4457440\n4003208\n3639054\n6059548\n5252525\n4613314\n4578387\n5544109\n5887309\n4233657\n6143525\n4583571\n4264761\n4738869\n4590727\n5261675\n4884477\n5032619\n5039797\n6153080\n6897893\n10882394\n6084248\n6236493\n10820064\n7903815\n7642262\n7872711\n8498418\n8812044\n8817228\n8972526\n8824384\n8848332\n8855488\n9630524\n9003630\n12526739\n9623346\n11116867\n10294294\n9917096\n16907445\n14012323\n13726510\n12320741\n14582666\n15546077\n13878755\n15514973\n15776526\n18889622\n22157263\n17315646\n17784570\n18626976\n17672716\n17703820\n17851962\n14144619\n19253870\n29655281\n19540442\n19917640\n23929419\n24499762\n26047251\n33628488\n36926586\n26465360\n26199496\n28023374\n29393728\n29921145\n29659592\n36330796\n31460265\n31817335\n35636532\n31848439\n31996581\n33398489\n33685061\n56844226\n34062259\n38794312\n48429181\n44417402\n50965122\n49976670\n56496343\n52246747\n52664856\n54222870\n56120641\n55593224\n63277600\n59053320\n63058081\n68148131\n63308704\n69321593\n107475483\n63845020\n65395070\n67460748\n67083550\n111706781\n72856571\n78479661\n87223493\n92846583\n111500952\n100941792\n124644474\n104911603\n117500470\n106887726\n109816094\n217291577\n136165275\n184961218\n122898340\n152618563\n127153724\n174559033\n166336862\n184563352\n129240090\n239193433\n134544298\n151336232\n179421453\n165703154\n171326244\n180070076\n197758186\n205853395\n207829518\n302502137\n263318999\n232714434\n216703820\n388030064\n259063615\n285880530\n470443882\n250052064\n263784388\n404896587\n437216762\n280576322\n294943244\n300247452\n305870542\n337029398\n604733884\n345124607\n486429717\n351396320\n377828262\n456821801\n625700929\n424533338\n449418254\n466755884\n475767435\n1092456813\n509115679\n789692001\n657266862\n544995308\n513836452\n714857660\n631972642\n575519566\n580823774\n595190696\n637276850\n932220094\n786447652\n696520927\n953185601\n1067253491\n729224582\n970658253\n942523319\n900300773\n873951592\n975871563\n980592336\n1141088321\n1022952131\n1243061034\n1058831760\n1218100624\n1310048356\n1212796416\n1844609845\n1277344701\n1156343340\n1176014470\n1232467546\n1333797777\n1425745509\n1639044246\n1603176174\n1752176713\n1671747901\n1629525355\n1774252365\n1896903723\n2703090210\n2448697640\n1956463899\n2003544467\n2081783891\n2215175100\n2234846230\n2551898401\n2445263962\n2332357810\n3727912871\n3000953185\n2433688041\n2388810886\n2658213055\n2566265323\n2936973951\n3028921683\n3232701529\n4345601363\n3381702068\n4106610175\n4131749953\n4414141701\n4316630121\n3960008366\n4038247790\n4085328358\n4218719567\n4781440423\n6029874868\n4801111553\n7782393608\n7367376876\n5417732569\n7086281543\n4999953364\n4822498927\n4955076209\n13116156411\n7114250041\n7022302309\n6261623212\n8452389491\n7341710434\n7419949858\n7998256156\n9414095065\n8401958479\n8045336724\n8123576148\n8839359343\n8304047925\n9218672931\n9582551976\n9623610480\n16709892023\n12782346972\n12114203405\n14578686689\n15872339349\n9777575136\n11084122139\n11216699421\n19486080618\n17241317822\n13283925521\n13603333646\n30313225669\n14761660292\n17620631410\n16168912872\n16884696067\n16349384649\n25568057580\n20666674115\n17143407268\n26292443999\n18801224907\n19206162456\n19401185616\n20861697275\n20994274557\n36349569724\n22300821560\n23061500657\n24539235428\n24368047660\n30702780039\n29772246518\n32382291702\n28045585813\n33970016059\n30930573164\n31111044941\n32518297521\n33053608939\n41660948672\n40262882891\n35944632175\n36544592884\n38005104543\n43162518835\n38007387363\n43923197932\n47600736085\n41855971832\n43295096117\n45362322217\n46668869220\n48907283088\n70523402064\n52413633473\n57817832331\n58976158977\n63984182103\n59156630754\n62041618105\n73316491830\n85451875972\n76012491906\n89170165979\n73949736718\n105964816037\n149962228624\n74549697427\n79861076375\n79863359195\n81930585295\n85151067949\n88524841052\n239132394603\n92031191437\n122960341080\n110948901193\n101320916561\n119859450436\n137865509445\n121017777082\n159100804667\n180514513464\n121198248859\n135358109935\n260825850525\n177333408467\n148499434145\n307600238812\n195747946286\n154410773802\n154413056622\n300293749547\n313513861289\n161793944490\n268358884581\n467926917911\n250318785542\n193352107998\n202980092630\n350161002908\n380313501097\n221180366997\n240877227518\n242216025941\n256375887017\n415476691684\n373866621462\n256556358794\n316204718292\n445692293048\n537385085289\n302912490767\n410969415416\n355146052488\n543789718285\n443670893540\n364774037120\n382974311487\n913619210959\n601493868094\n396332200628\n414532474995\n819558914510\n585954404117\n462057594515\n497253114535\n463396392938\n658058543255\n702248651842\n905728488055\n559468849561\n572761077086\n611702411282\n619117209059\n667686527887\n685886802254\n699244691395\n719920089608\n738120363975\n747748348607\n761106237748\n779306512115\n880227426022\n858389795143\n955801050189\n810864675623\n1033649684054\n1056721964096\n925453987453\n1178586058620\n1075098804220\n1149283195192\n1132229926647\n1171171260843\n1184463488368\n1286803736946\n1191878286145\n1230819620341\n1305004011313\n1353573330141\n1433635150861\n1619496032891\n1540412749863\n1558613024230\n1508854586355\n1590171187738\n1637696307258\n3023806338599\n1943094602270\n1982035936466\n2476175272156\n2380102815533\n1982175951549\n2000552791673\n2310815985267\n3610922435874\n2281513121839\n2303401187490\n2457974997789\n2422697906486\n4285437123956\n4964495766015\n2535823631654\n2658577341454\n2787208481002\n2942489737216\n4282065913512\n3619732243724\n3148784211968\n3099025774093\n4839224819144\n3619872258807\n4292991936816\n3925130538736\n3964211888015\n4661615937372\n3982728743222\n4817336753493\n4303953979163\n4584914309329\n4704211028325\n8210567662692\n4726099093976\n6091273949184\n4958521538140\n5194400973108\n5601067078670\n5323032112656\n8942764356380\n13246718335543\n6562221980940\n10559588616810\n8437209012300\n6247809986061\n6718898032900\n8651229632712\n9779315282437\n14083269261600\n8922733426155\n7946940631237\n8286682722385\n18065998004822\n8888868288492\n11570842098717\n9289125337654\n12914778691017\n14523800504825\n9684620632116\n10152922511248\n18177993626146\n10517433085764\n13974261745368\n11885254093596\n26889040436385\n13281120013840\n14509162612177\n32149267266422\n18954642098064\n40972309697985\n14665838664137\n16233623353622\n17631561263353\n16835808919729\n22402687179360\n32140723875530\n17175551010877\n18573488920608\n19041790799740\n18973745969770\n19442047848902\n19837543143364\n32155361768178\n20202053717880\n34807112274230\n33620480762201\n44025977969126\n26394416705773\n25166374107436\n31344971531906\n27790282626017\n29175001276314\n30899462017759\n44023905979639\n31501647583866\n33639584633907\n38811289113134\n34011359930606\n48520522542783\n35749039931485\n65141232217773\n36149296980647\n37547234890378\n46764028595787\n38415793818672\n69192352076562\n83327634817013\n55569417982087\n55009165992110\n63941651596151\n52956656733453\n51560790813209\n54184699331790\n54341375383750\n62244433549665"

readInput :: String -> [Int]
readInput = fmap read . lines

containsSum :: Int -> [Int] -> Bool
containsSum target nums =
  not . null $
    [ (x, y)
      | x <- nums,
        y <- nums,
        x /= y && x + y == target
    ]

findN :: [Int] -> [Int] -> Maybe Int
findN _ [] = Nothing
findN preamble (n : ns)
  | containsSum n preamble = findN (n : init preamble) ns
  | otherwise = Just n

findSeq :: Int -> [Int] -> [Int] -> [Int]
findSeq _ _ [] = []
findSeq t seq (n : ns)
  | sumSeq > t = findSeq t (init seq') ns
  | sumSeq < t = findSeq t seq' ns
  | otherwise = seq'
  where
    seq' = n : seq
    sumSeq = sum seq'

partOne :: Int -> String -> Int
partOne preambleLength value =
  fromJust $ findN (reverse preamble) nums
  where
    (preamble, nums) = splitAt preambleLength $ readInput value

partTwo :: Int -> String -> Int
partTwo target value =
  minimum seq + maximum seq
  where
    nums = reverse $ takeWhile (target /=) $ readInput value
    seq = findSeq target [] nums
