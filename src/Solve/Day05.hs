module Solve.Day05 where

import Data.List
import Data.List.Split (splitPlaces)
import Data.Maybe

input :: String
input = "BBFFFBBLLR\nBBFFFFFLRL\nBFBFFFBLRR\nFBBFFFFRLL\nFFBFFFBLRR\nBFBBBFFLLL\nBFBBBFFLRR\nFBBFBBFRLL\nBFFBFBBLLL\nBFBFBBFRRR\nFBFBFFBLLR\nFFFBBBFRLL\nBFBBFBBRRR\nFBFFBFBRRR\nBFFBFFFLLL\nFBBBFBFLRR\nBFBBFBFRLR\nBFFFFFBRRL\nBFFBFFFRLR\nFBBBBBFRLL\nBFBBFBBLRL\nBFFFBFBRLR\nFBBBBFBLLR\nBBFFFBFRRR\nBFFBBBFLRL\nBFBFBFFLLR\nFFFBBBFLLR\nBFBFFFFRRL\nFFFBBFBLLR\nFBFFFBFLRL\nFBBBFBBRLL\nFBBFBFFLLR\nFBFBBFFLLL\nFBBFFFFLLL\nBFBFFBFRRL\nFFBBBFBRLL\nBFFBBFFLLR\nBFBBBBBRLR\nBFFBFFFRLL\nFBBBBFFRRR\nFFBBBFFRRL\nBBFBFBBLRR\nBBFFFFFLLR\nFFBFBFBLRR\nFBBBBFFLLR\nBBFBFBBRLR\nFFBFFBFRLR\nBFBBFFFLRL\nFFBFBFFLLR\nFFBFBBFRRR\nBBFFFBFLLL\nBFFFBBFRLL\nFFBFBBFLRR\nFBBBFFFRLL\nFBBFBFBRLR\nBFFFFFBRLR\nBFBFBFBLRL\nFBBBBFBLRL\nBBFFFFBLRR\nFBBBFFFRRR\nFFBBFFBLRL\nFBFBFFFRRL\nFFBFBBFLLL\nBBFFFBBRLR\nFBFBFFBRRR\nBBFFBBFRLR\nBFBBBFBLLR\nBFFBFBBLLR\nFBBBFBBLRR\nFFBFBBFLRL\nBFBFFBBRLR\nBFBBBFFLRL\nBFFFFBBRLR\nBFBBBFBRRL\nBFBFBBBRRR\nFFBFFBBLRR\nFBFBBBBRRL\nFFBFFFBRLL\nFBFFFFBLLL\nFFBBBFBLRR\nBBFFBBFLLL\nBFFBFBBLRR\nFBBBFBBRRL\nFFBFFBFRRR\nBFBBFFBRLL\nFBFFBBBLRR\nFFBFFBFLLL\nFBFBFBFRRL\nBBFFFFFLRR\nFFBBFBFRLL\nBFBBFFFRLL\nFBBBBFFLLL\nBFFBFBBRRL\nFBFBBBFLRR\nFBBBBFFLRR\nFBFFBBFLLL\nBFFFBBFRRL\nBFBBBFBRLL\nBFBFBBFRLL\nFBFFFFBRLL\nBBFBFBBLLL\nFFBBBFBLLR\nBBFFBBBLLR\nFBBBBBBRRR\nBBFFBFFRLL\nFBBFFBBRRL\nFFBBBBFRRR\nFBFBBFBRRL\nBFFFBFFRLL\nBFBFBFFRLL\nFBFBFFBLRR\nBFBBFFFRRR\nBFBBBBBLLL\nBFBBFFFRLR\nFFBFBFBRLL\nFBFFBFBRRL\nFFFBBBFRLR\nBBFFFBFLLR\nFBFBBBBRLR\nFBFBBFFLRL\nFBBBBFBLRR\nFBFBBBBLLL\nBFBBFBBLRR\nFFBBFBFLRL\nFFBFBBFRLL\nBFFFBFBLRR\nFFBFFBBRRR\nFBFFFFFRLL\nBFFFBFFRRR\nBFFBBFBRLR\nBFBFBBBLLL\nBFFBBFBLLR\nBFFBBBFLLL\nBFFFBFFLRL\nFBBFBFFLLL\nFBBBBBFLRR\nFBFBFBBRRR\nBFBBBBFLLR\nFBFFBFBLLR\nBBFFBBBLLL\nBBFFBBBRLR\nFFBBBFFRRR\nBBFFFBFLRR\nFFFBBBBRRR\nFFBFBFBRRR\nFFFBBFFRLL\nFBFFBBFRLR\nBFFBBBBRRR\nFBFBFFBLLL\nBBFBFFBLRL\nFFBFFBFLLR\nBFFFBBBLRL\nFBFFBFFLRR\nFBFFBBBLLR\nFBBFBFFLRR\nBFFBFFFRRL\nFBBFBBBLLL\nBBFBFBFRRL\nFBFFFFBRLR\nBFBFBFBLRR\nBFFBFBBRLL\nBFBFBBFLRL\nFBBBBFFRLR\nBFFFBBFLLL\nBFBBBFBLLL\nFFBBBBFRRL\nFFBFFFFLLR\nFBFBFFBRLL\nBBFBFBFLRL\nFBBBBBBRLR\nBFBFFFBLLR\nBBFFBBFLRR\nBBFFBBBRRR\nFBFFFBFRLR\nFFBBFFBLLL\nBFFBFBFLLL\nFBFFFFFLRL\nBFFBBFFLRL\nFBBBBBBRRL\nBFFBFBBRLR\nFBFBFBFLLL\nBFFBFFFRRR\nBBFFFFBRRR\nBFFBBFFRRR\nFBBFBBBLRL\nFFBBFBBRLL\nFBFFBBFRLL\nBFBFFBBRRL\nFBBFFFBLRL\nBFBBFFBLRR\nBBFFBFBRLR\nFBFBFFBRLR\nBBFFBFBRRL\nFFBBFBBRLR\nBFBFBFFLRR\nBFFBFFFLRL\nFFBBBFBRRL\nFFBFFBBLRL\nFBBFBBBRLR\nFFFBBBBRLR\nFBBFFFBLLR\nFFBFBBBRRR\nFFBBBFBRRR\nBFFBFBFRLL\nBFBBBBFLLL\nBFBFFFFRLL\nFBBBBBFRLR\nBFFBFBFLRL\nFBFFBFFRRL\nBBFFBFFRRL\nBFFBFBBRRR\nFBFFFBBRRR\nFFBBFBFRRR\nBFBBBFBLRL\nFFBBBFFLLL\nBFFFBBBRRR\nBFFBBBBRLL\nBFBBBBBLRL\nFBFFFBBLLL\nFBFBBBFLLL\nFFBBBFFRLR\nFFBFFFFRLR\nFFBFFBFRLL\nBFBFBFFRRL\nBFBFFBBRRR\nFFFBBFFRRR\nBFFFBFBLLR\nFBFBFBFLRR\nBFBFFFFLLL\nFBBBFBBLLL\nFBBFBBFRLR\nFFBFBFFLRL\nFBFFBFFLLR\nBFBFBFBLLR\nFBBFFFFRLR\nFBFBFFBLRL\nBFFFBFFLLR\nBFBFBFBLLL\nBFBBFBFLRR\nBFFBBFFRLL\nBFFFBBFRRR\nBFBFFBBLLR\nFBBFBBBLRR\nFFBFFFBLRL\nBFFFBBBRLR\nBBFBFFBLLR\nBBFBFBFRLL\nFFFBBFBRRL\nBFFFFBBLRR\nBBFFFFFRRR\nBFBBFBBRRL\nBFFFFFFRLL\nBFFFFFFLLL\nFBFFBBBRLR\nBBFBFFBRRL\nBFFFBBFLRR\nFBBFBFBLLR\nFFBBBBBLLR\nFBFBBFFRLL\nBFBBFFFRRL\nFFBBBFBRLR\nFBBBFFFLRR\nFFBBBFFRLL\nFFBBBBBRLL\nBFFFBBBLLR\nFBBFFFFLLR\nBBFBFFBLRR\nFFBFBBFRRL\nBBFBFBBLRL\nBFBBBFBRRR\nFFBFFBBRLL\nFFBFBFFRRR\nFBFBBFBLRL\nBBFFFBBRRR\nBFFBBBBLRR\nBFBFBBFRLR\nFBBBBFBRRR\nFFBBFFBLRR\nFFFBBBFLLL\nBBFBFFFLLR\nFFBFFBFRRL\nBBFFFBFLRL\nBFBFFFFRRR\nBFFFFFFRRL\nFFBFFFFLRR\nBFBBBFBLRR\nFFFBBBBLLR\nBFFBBFFRLR\nBBFFFBFRLR\nBFFBFFBRLR\nFFBBFFFLLR\nFFBBFBFRRL\nFBFBBBBLRL\nFBBBFFBLLL\nFBBBBBBLRR\nFFBBFBBLRR\nFBBFBBFRRL\nFBBFFFFLRR\nFFBBFFBRLR\nFBFFFFBLRL\nFBFFBFFRLR\nBFBFFBFRRR\nFFBFFFFRLL\nBFBFFBBLRL\nFBFFFBFRRR\nBFFBBBFRLR\nBFFBBFBRRL\nBFBBBBFLRR\nFFBFBBBRLL\nFBFBBBFRLL\nBFBFFFFLRR\nBBFBFFFLLL\nBFFBBBBLRL\nFFBFBFBLLR\nFBBFFFBRLL\nBFFFFFBLLR\nFBFBBFFRRR\nFBFFBBFLRR\nBFFFFFBLLL\nFBFFFFFRRL\nFFBBBFBLLL\nFBBFFFFLRL\nBBFBFFBRRR\nFBFFBFBRLR\nFBBBFBFLLR\nBFFBBBBRRL\nBFFFBBFLLR\nBFFBFFBRLL\nFFBFBBBLLR\nFFBFBFFRLR\nBFFBFFBLRR\nBFBBBFFRRL\nBFFBBFBLRL\nFBFBFBFLRL\nBBFBFBBRLL\nFBFFFFBRRL\nFFBBBBBRRR\nBFBFFFBRRR\nFFBFFBFLRL\nBFFBBBFLRR\nFBFBBFBRLL\nBFBBBFFRRR\nBFFBFFFLRR\nBFBFFFFRLR\nFBBBFBFLRL\nFFFBBBFRRR\nFBFBBFFRRL\nBFFFBBFLRL\nFBBBBFBRLR\nFBBFBBFLLR\nFBFBBBBLRR\nFFBBBBBRRL\nFFBBFFFLLL\nFFBBFBBLLR\nBBFFFBFRLL\nBBFBFBBLLR\nFBBFBFBLLL\nFBFFBBFRRR\nFBBBFBBRRR\nBFBFBBFLLL\nFBFBFBBRRL\nBFBBFBFLRL\nBFBBFBBLLL\nFBBFBFFRLL\nBBFFFBBLLL\nFFBBFFFLRL\nBFFBFFFLLR\nBFFBBFBRRR\nBFFBFFBLLL\nBBFFBFBLRR\nFBFBFBBLRR\nBBFBFBFRLR\nBFFFFBFLLL\nFBBFBFFRLR\nFBFBFBBRLL\nBFFFFFBLRL\nBFBBFBBLLR\nBBFFBFFLLR\nBBFFBFBLRL\nBBFFBBBLRR\nFBFFBFBLRL\nBFFBBFBRLL\nBFFBBFFLRR\nFBBFFBFRRL\nBBFBFFBLLL\nBFBFBBBLRL\nFFBFFFBLLR\nFBBBFBFRLR\nBFFFFBFRRR\nBFBFBFBRRR\nFBBBBBFLLR\nBBFFBBFRRL\nBBFFFFFRLR\nFBFBFBBLLL\nBFFFFBFLRR\nBFFBBBFLLR\nFBFBBFBRRR\nBFBFBFFRLR\nFBFBFBFRLR\nBFBBFBFRRL\nFFBBFFBLLR\nFBBBBBFRRL\nBFBFFFBRRL\nBBFFBBBLRL\nFBBBFFFLRL\nBFFFBBBRRL\nFBBFFBBLRL\nFFBBBBBRLR\nBFBFBBBRLR\nFBFBFBBRLR\nFFBBBBBLRL\nFFBBFBFLLR\nFBFBFBFLLR\nFBFBBBBRLL\nFBFFFFFLLL\nBFFBFBFLLR\nBFBBBBBRRL\nFBBBBFFRLL\nBFBFFFBLLL\nFBFFBFBLRR\nFBFBBFBLLR\nFBBFFBFLRR\nBBFFFBBRRL\nFBBBFFBRLR\nBFFBBFFLLL\nFBFBBFFLRR\nFFBBBBFRLR\nFFBBBFFLRL\nFFBBFFFRRL\nBBFBFFFRRL\nFBFBFFFRLL\nBFBBBBFLRL\nFBFFFBFLLR\nFBFFBBBRLL\nFBBBFBBRLR\nBFBBBBBLLR\nBFBBFFBLLL\nBFBBFFFLLR\nFBBFBFBLRR\nBFFFBFFRRL\nFFBFFFFRRR\nFBFBFBBLLR\nFFBBBBFLLL\nFBFFFBFRRL\nFBBBFFBRRR\nBFBBFFFLRR\nBBFFFFBRLR\nFBBBFBFRLL\nFFBFFFBRLR\nFBFFFFBRRR\nFFBFBFFLLL\nBBFBFFBRLR\nBFFBFBFRLR\nFBBBBFBRLL\nFBFBFFFRRR\nBBFFBFFLRL\nBFBFBBBLLR\nFBBBBFFRRL\nFBFBFBFRRR\nFFBFBFBRRL\nFBFBBFBLRR\nFBBBFFBLRL\nBBFFFBBLRL\nFFBBFBFLRR\nBFFFFFFLLR\nBFBBBBBRLL\nBFBFBFBRLL\nBFBBFBFLLR\nFBFFFFFLRR\nBFFFBBBRLL\nFBBBBBBRLL\nBFBFBBBRRL\nFBFFBFBRLL\nFFFBBBBLRL\nBFBFFFBRLR\nFFBBBBFRLL\nFFBBFFBRLL\nBFFFBFBLLL\nBFFBFFBLLR\nBBFFFFFRRL\nBBFFBBFRRR\nBFBFFBFRLR\nFBFFBFFRLL\nFBBFBBBRRR\nBFFFFBFRRL\nBFFBFFBRRL\nBBFBFFFLRR\nBFBFBBFLLR\nFFBFFBBLLL\nFBFBFFFLRL\nFBFBFFFLLR\nBFBFBBFRRL\nFFBFFFFLLL\nBFFBFBBLRL\nFBFFFBBRLL\nFFFBBBBRRL\nFBFFBBFLRL\nFBFFFBBLLR\nFFBFBFFRLL\nFFBBBFFLLR\nBFBFFBBLLL\nBBFBFFBRLL\nBFFFFBFLLR\nBFFFFFFLRL\nBBFFBFFRLR\nFBBBFBFRRR\nFFFBBFBLLL\nFFBBFBBLLL\nBFFFFBFLRL\nBFBFBFFRRR\nBFBFFFFLLR\nBFFFBFBLRL\nFBBBBBBLLR\nBFFFFFFLRR\nFFBFBFBLRL\nBFFFFBBRRR\nBFBBFBBRLR\nBFBBFFBRRL\nFFBBBBBLLL\nFBFFFFBLLR\nFBBBFFBRLL\nFBBFBFBLRL\nBFBFFFBRLL\nFFBBFBBRRL\nBFBBFBFRLL\nFFBFFBBRRL\nFBBFBFFRRR\nBBFFFBBRLL\nBBFFBFBLLL\nFBFBFFFRLR\nFBFFFBBLRL\nFBFBBBFLRL\nBFFFFFFRLR\nFFFBBFFRRL\nFBFBBFFLLR\nBFFBFFBRRR\nFBBBFBFRRL\nBFBFFBFLRR\nBBFBFFFRLL\nBFFFFBFRLR\nFFBFBBBLLL\nFBBFFFBRLR\nBFFFFBBRRL\nBBFFBBBRLL\nBBFBFBFLRR\nBBFFBBBRRL\nFBFFBBBLLL\nBFBBFFFLLL\nFBBFBBBRLL\nBBFFBBFRLL\nBFFBFBFLRR\nFBFFBFFRRR\nFBBFFBFRRR\nBBFFBBFLRL\nBBFFBFFLRR\nFBBFFFBLRR\nFFBFBFFLRR\nBBFFBFFRRR\nBFBFBFFLRL\nFBFBBFBLLL\nBBFFBFFLLL\nBFBBBBFRRR\nBBFFBFBRLL\nFBFBBBFRRL\nBFBFFFBLRL\nFBBFFBBRLR\nFFBFFFBRRR\nBFBFBFBRRL\nBFFFBFBRLL\nFBFFFBBRLR\nFFBFFBFLRR\nBBFFBBFLLR\nBBFFFBBLRR\nBBFFFFBRLL\nBBFBFFFRLR\nFBFBFBFRLL\nFBBFFBFRLL\nFFFBBBFLRR\nBFFFBFBRRL\nBFFFFBBLRL\nBFFFFFBLRR\nBFFFFBFRLL\nFBBFBFFRRL\nBBFBFBFLLL\nFBFFBBBLRL\nFBBBFFBLRR\nFBBFFBBLRR\nFFFBBFBLRL\nBFFFBFFLRR\nFFBFFBBLLR\nBFBFBFBRLR\nBBFBFBFRRR\nBFFBFFBLRL\nFBFFBFFLLL\nFBFBFFFLRR\nFBBFBFBRRR\nBBFFBFBRRR\nFBBBBBBLLL\nFBBFBBFLLL\nFBBFFBFLLL\nFFBBBBFLLR\nFFBBBFFLRR\nFBFBFFFLLL\nFFBBBFBLRL\nFFFBBFBRLL\nBBFFFFBRRL\nFFFBBFBLRR\nBFBFBBBRLL\nFBFBBBFRLR\nFBBFFBBLLL\nFBFBBBFLLR\nFBFFBBFLLR\nBFBBBBBRRR\nFBBFFBFLLR\nFBFFFBBRRL\nBFBBBFFRLR\nBFBBBFFLLR\nFBFFFBBLRR\nFFBFBBBLRL\nBFFFBBBLLL\nFFBFFFBRRL\nBBFFFFFRLL\nFFFBBFBRLR\nFFFBBBBRLL\nFBBFBBFLRR\nFBBBBFBRRL\nBFBBBBBLRR\nBBFBFFFLRL\nBFBFBBFLRR\nBFBBFFBRLR\nFBFFFFFRLR\nFFBFFFBLLL\nFBBFBFBRLL\nBFBFFBBLRR\nFBBBBFBLLL\nFBBBFBFLLL\nFBFFFBFLLL\nBFFFFFBRRR\nFBBFFBFLRL\nBBFFBFBLLR\nFBBFBBBLLR\nFFBFFFFRRL\nFBBFFBBLLR\nBFFFFFBRLL\nFBFBBFFRLR\nFBBFFFBLLL\nBFFBBBFRRR\nBFFBBFBLRR\nFFBBBBBLRR\nFFBFFBBRLR\nFFBFFFFLRL\nFFBFBBBLRR\nBFBFFBFLRL\nFBFFBFFLRL\nFFBBFFFRLR\nBFBFBFFLLL\nFFBFBFBRLR\nFFBBFFBRRL\nFFBBFBFRLR\nFBBBFBBLLR\nFBFBBBBRRR\nFBBFFFFRRR\nFBFFBBBRRL\nBFBBBBFRLL\nFBBBBBFLRL\nFBBBBBBLRL\nFFBFBBFLLR\nBFBFFBFLLL\nBFFBBBBRLR\nFBFFFFFRRR\nFBFBBBBLLR\nBFBBBFBRLR\nBFFBBBFRRL\nBFFFBFFRLR\nBFBBBBFRRL\nBBFBFBFLLR\nBFFFBBBLRR\nFFBBFBBRRR\nFBFFFBFRLL\nFBBBFFFLLR\nBFBFFFFLRL\nFFBFBFFRRL\nBBFFFFBLRL\nBFFBBFBLLL\nBFFBBBBLLL\nFBBFFFFRRL\nFBBFBFFLRL\nBFFBFBFRRL\nFBFFBBFRRL\nFBBFFBBRRR\nFFFBBBBLRR\nFFBBFFBRRR\nFBBBFFFRRL\nFFBBFFFRLL\nFFFBBBFRRL\nFBFBFBBLRL\nBFFBBBFRLL\nFBBBBBFRRR\nFBBFBFBRRL\nBFFFFBBLLR\nFBFBFFBRRL\nBFBBFFBLRL\nBFBFFBBRLL\nBFBBBBFRLR\nFFBFBBFRLR\nFFBBFBBLRL\nFBBBFFFRLR\nBFBBBFFRLL\nFBBBFFFLLL\nBBFBFFFRRR\nBFBFBBBLRR\nFBFFBFBLLL\nFFFBBFBRRR\nBBFFFBFRRL\nFBFFFFBLRR\nBBFFFFBLLL\nBBFFFFFLLL\nFFBBFFFLRR\nBFFBFBFRRR\nBFFFBFBRRR\nFBBBFFBLLR\nBFBBFBFLLL\nFFBBBBFLRL\nFBBFFBFRLR\nBFFFFBBLLL\nFFBFBFBLLL\nFBBFFBBRLL\nFBBFFFBRRL\nFBFFBBBRRR\nBFFFBFFLLL\nFBBBBBFLLL\nBFFBBFFRRL\nFBBFBBBRRL\nBBFFFFBLLR\nFBFBBBFRRR\nFFBFBBBRRL\nFFBFBBBRLR\nFBBBFBBLRL\nFFFBBBBLLL\nBFBBFBBRLL\nFBBFBBFRRR\nBFFFFBBRLL\nBFFFBBFRLR\nFBBFBBFLRL\nBFBBFBFRRR\nFFBBBBFLRR\nFFFBBBFLRL\nFBFFFBFLRR\nFBBFFFBRRR\nBFBFFBFRLL\nFBFBBFBRLR\nBFBBFFBRRR\nFFBBFBFLLL\nFBFFFFFLLR\nBFBBFFBLLR\nFBBBBFFLRL\nFFFBBFFRLR\nBFBFFBFLLR\nFFBBFFFRRR\nFBBBFFBRRL\nBFFFFFFRRR"

data SearchInstruction
  = TakeUpper
  | TakeLower

readRowInstruction :: Char -> Maybe SearchInstruction
readRowInstruction = \case
  'F' -> Just TakeLower
  'B' -> Just TakeUpper
  _ -> Nothing

readColInstruction :: Char -> Maybe SearchInstruction
readColInstruction = \case
  'L' -> Just TakeLower
  'R' -> Just TakeUpper
  _ -> Nothing

data BoardingPass = BoardingPass
  { rowInstr :: [SearchInstruction],
    colInstr :: [SearchInstruction]
  }

readBoardingPass :: String -> BoardingPass
readBoardingPass str =
  BoardingPass
    { rowInstr = fromJust . readRowInstruction <$> rowStr,
      colInstr = fromJust . readColInstruction <$> colStr
    }
  where
    [rowStr, colStr] = splitPlaces ([7, 3] :: [Int]) str

search :: Int -> Int -> [SearchInstruction] -> Int
search lower upper =
  fst . foldl search' (lower, upper)
  where
    search' (lower', upper') =
      let mid = fromIntegral (lower' + upper') / 2 :: Double
       in \case
            TakeLower ->
              (lower', floor mid)
            TakeUpper ->
              (ceiling mid, upper')

getSeatId :: BoardingPass -> Int
getSeatId BoardingPass {rowInstr, colInstr} =
  row * 8 + col
  where
    row = search 0 127 rowInstr
    col = search 0 7 colInstr

partOne :: String -> Int
partOne value =
  maximum $ getSeatId . readBoardingPass <$> lines value

partTwo :: String -> Int
partTwo value =
  snd $ head $ filter (uncurry (/=)) $ zip seatIds [firstSeatId ..]
  where
    firstSeatId = head seatIds
    seatIds = sort $ getSeatId . readBoardingPass <$> lines value
